#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
_____, ___
   '+ .;    
    , ;   
     .   
           
       .    
     .;.    
     .;  
      :  
      ,   
       

┌─[Vaile]─[]
└──╼ VainlyStrain
"""

import sys, platform
import os, socket
import requests
from vsconsole import VainShell
from PyQt5.QtCore import Qt
import core.variables as variables
from core.variables import interface
from PyQt5.QtWidgets import QTreeWidgetItem
from PyQt5 import QtWidgets, uic, QtCore, QtGui
from core.methods.select import mlist as modulelist

shell = VainShell()

class VaileApp(QtWidgets.QDialog):
    def __init__(self):
        super(VaileApp, self).__init__() # Call the inherited classes __init__ method
        uic.loadUi("core/qt5/Main.ui", self) # Load the .ui file
        self.sessionType.addItem("normal")
        self.sessionType.addItem("parametrised")
        self.versionNumber.setText(variables.r_version)
        modules = modulelist("all", False)
        rootrecon = QTreeWidgetItem(self.treeView)
        rootrecon.setText(0, "Phase 1: Reconnaissance")
        rootrecon.setFlags(rootrecon.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        osint = QTreeWidgetItem(rootrecon)
        osint.setFlags(osint.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        osint.setText(0, "OSINT/Fingerprinting")
        self.genTree(osint, modules[0])
        active = QTreeWidgetItem(rootrecon)
        active.setFlags(active.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        active.setText(0, "Active Reconnaissance")
        self.genTree(active, modules[1])
        disc = QTreeWidgetItem(rootrecon)
        disc.setFlags(disc.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        disc.setText(0, "Information Disclosure")
        self.genTree(disc, modules[2])
        scanroot = QTreeWidgetItem(self.treeView)
        scanroot.setText(0, "Phase 2: Scanning & Enumeration")
        scanroot.setFlags(scanroot.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        self.genTree(scanroot, modules[3])
        port = QTreeWidgetItem(scanroot)
        port.setText(0, "Port Scanners")
        port.setFlags(port.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        self.genTree(port, modules[4])
        crawl = QTreeWidgetItem(scanroot)
        crawl.setText(0, "Web Crawlers")
        crawl.setFlags(crawl.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        self.genTree(crawl, modules[5])
        vlnroot = QTreeWidgetItem(self.treeView)
        vlnroot.setText(0, "Phase 3: Vulnerability Analysis")
        vlnroot.setFlags(vlnroot.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        miscon = QTreeWidgetItem(vlnroot)
        miscon.setText(0, "Misconfigurations")
        miscon.setFlags(miscon.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        self.genTree(miscon, modules[6])
        severe = QTreeWidgetItem(vlnroot)
        severe.setText(0, "Severe Vulnerabilities")
        severe.setFlags(severe.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        self.genTree(severe, modules[7])
        brute = QTreeWidgetItem(vlnroot)
        brute.setText(0, "Password Attacks")
        brute.setFlags(brute.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        self.genTree(brute, modules[8])
        sploit = QTreeWidgetItem(self.treeView)
        sploit.setText(0, "Phase 4: Exploitation")
        sploit.setFlags(sploit.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        self.genTree(sploit, modules[9])
        aid = QTreeWidgetItem(self.treeView)
        aid.setText(0, "Additional Modules")
        aid.setFlags(aid.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
        self.genTree(aid, modules[10])
        self.treeView.header().hide()
        self.show() # Show the GUI
        self.addTargetButton.clicked.connect(self.addTargetInput)
        self.editTargetButton.clicked.connect(self.editTargetInput)
        self.deleteTargetButton.clicked.connect(self.deleteTarget)
        self.loadSessionButton.clicked.connect(self.chooseSession)
        self.fetchButton.clicked.connect(self.fetchNetInfo)
        self.optsButton.clicked.connect(self.displayInfo)
        self.torBox.stateChanged.connect(self.tor)

    def genTree(self, parent, modulist):
        for i in range(len(modulist)):
            if "-all" not in modulist[i]:
                child = QTreeWidgetItem(parent)
                child.setFlags(child.flags() | Qt.ItemIsUserCheckable)
                child.setText(0, modulist[i])
                child.setCheckState(0, Qt.Unchecked)

    def addTargetInput(self):
        self.addTargetDialog = QtWidgets.QDialog()
        uic.loadUi("core/qt5/AddTargetDialog.ui", self.addTargetDialog)
        self.addTargetDialog.httpBox.addItem("http")
        self.addTargetDialog.httpBox.addItem("https")
        self.addTargetDialog.show()
        self.addTargetDialog.addTargetToListButton.clicked.connect(self.addTarget)
        self.addTargetDialog.cancelButton.clicked.connect(self.addClose)

    def addTarget(self):
        try:
            base = self.addTargetDialog.urlField.text()
            assert base != "" and "://" not in base and "@" not in base
            user = self.addTargetDialog.userField.text()
            passwd = self.addTargetDialog.passwordField.text()
            protocol = self.addTargetDialog.httpBox.currentText()
            if protocol == "":
                protocol = "http"
            if user != "" and passwd != "":
                if self.addTargetDialog.ipOnly.isChecked():
                    target = base
                else:
                    target = protocol + "://" + user + ":" + passwd + "@" + base
            else:
                if self.addTargetDialog.ipOnly.isChecked():
                    target = base
                else:
                    target = protocol + "://" + base
            self.targetsListWidget.addItem(target)
            self.targetsListWidget.show()
            self.addTargetDialog.close()
        except AssertionError:
            os.system("konsole -x 'echo AssertionError'")

    def addClose(self):
        self.addTargetDialog.close()

    def deleteTarget(self, item):
        for item in self.targetsListWidget.selectedItems():
            self.targetsListWidget.takeItem(self.targetsListWidget.row(item))
        self.targetsListWidget.show()
        
    def editTargetInput(self):
        self.editTargetDialog = QtWidgets.QDialog()
        uic.loadUi("core/qt5/EditTargetDialog.ui", self.editTargetDialog)
        self.editTargetDialog.httpBox.addItem("http")
        self.editTargetDialog.httpBox.addItem("https")
        for item in self.targetsListWidget.selectedItems():
            target = item.text()
            if "://" in target:
                protocol = target.split("://")[0]
                rest = target.split("://")[1]
                if "@" in rest:
                    user = rest.split(":")[0]
                    passwd = rest.split(":")[1].split("@")[0]
                    base = rest.split("@")[1]
                else:
                    user = ""
                    passwd = ""
                    base = rest
                index = self.editTargetDialog.httpBox.findText(protocol, QtCore.Qt.MatchFixedString)
                if index >= 0:
                    self.editTargetDialog.httpBox.setCurrentIndex(index)
            else:
                user = ""
                passwd = ""
                base = target
                self.editTargetDialog.ipOnly.setChecked(True)
            self.editTargetDialog.userField.setText(user)
            self.editTargetDialog.passwordField.setText(passwd)
            self.editTargetDialog.urlField.setText(base)
        self.editTargetDialog.show()
        self.editTargetDialog.saveTargetInListButton.clicked.connect(self.editTarget)
        self.editTargetDialog.cancelButton.clicked.connect(self.closeEdit)

    def editTarget(self):
        try:
            base = self.editTargetDialog.urlField.text()
            assert base != "" and "://" not in base and "@" not in base
            user = self.editTargetDialog.userField.text()
            passwd = self.editTargetDialog.passwordField.text()
            protocol = self.editTargetDialog.httpBox.currentText()
            if protocol == "":
                protocol = "http"
            if user != "" and passwd != "":
                if self.editTargetDialog.ipOnly.isChecked():
                    target = base
                else:
                    target = protocol + "://" + user + ":" + passwd + "@" + base
            else:
                if self.editTargetDialog.ipOnly.isChecked():
                    target = base
                else:
                    target = protocol + "://" + base
            for item in self.targetsListWidget.selectedItems():
                self.targetsListWidget.takeItem(self.targetsListWidget.row(item))
            self.targetsListWidget.addItem(target)
            self.targetsListWidget.show()
            self.editTargetDialog.close()
        except AssertionError:
            os.system("konsole -x 'echo AssertionError'")

    def closeEdit(self):
        self.editTargetDialog.close()

    def chooseSession(self):
        if ".val" in self.sessionFileEdit.text() or self.sessionType.currentText() != "normal":
            #TODO
            print()
        else:
            self.loadNormalSession()

    def loadNormalSession(self):
        #targets loaded into vars.targets at attack launch
        try:
            targets = []
            filepath = self.sessionFileEdit.text()
            assert os.path.isfile("core/sessioncache/{}".format(filepath)) and filepath != ""
            with open("core/sessioncache/{}".format(filepath),"r") as f:
                targets = [line.rstrip("\n") for line in f]
            self.targetsListWidget.clear()
            for vic in targets:
                self.targetsListWidget.addItem(vic)
            self.targetsListWidget.show()
        except AssertionError:
            os.system("konsole -x 'echo AssertionError'")

    def fetchNetInfo(self):
        try:
            mac = os.popen("cat /sys/class/net/{}/address".format(interface)).read()
            self.macDisplay.setText(mac)
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(('google.com', 0))
            localaddr = s.getsockname()[0]
            self.privIpDisplay.setText(localaddr)
            ipaddr = requests.get('http://ip.42.pl/raw').text
            self.publicIpDisplay.setText(ipaddr)
            def_gw_device = os.popen("route | grep '^default' | grep -o '[^ ]*$'").read()
            self.whoIsDisplay.clear()
            self.whoIsDisplay.addItem("Operating System: " + platform.system())
            self.whoIsDisplay.addItem("Name: " + platform.node())
            self.whoIsDisplay.addItem("Interface: " + def_gw_device)
            self.networkTab.show()
        except Exception as e:
            print("Exception encountered: {}".format(e))

    def displayInfo(self):
        self.infoOptDialog = QtWidgets.QDialog()
        uic.loadUi("core/qt5/InfoOpts.ui", self.infoOptDialog)
        try:
            for item in self.treeView.selectedIndexes():
                shell.do_load(item.data())
                info = shell.do_info("", gui=True)
                self.infoOptDialog.titleLabel.setText(item.data())
                self.infoOptDialog.infoPanel.setText(info[0])
        except:
            pass
        self.infoOptDialog.show()
        self.infoOptDialog.cancelButton.clicked.connect(self.closeOpts)

    def closeOpts(self):
        self.infoOptDialog.close()

    def tor(self):
        if self.torBox.isChecked():
            shell.do_tor("on", shell=False)
        else:
            shell.do_tor("off", shell=False)


app = QtWidgets.QApplication(sys.argv) # Create an instance of QtWidgets.QApplication
window = VaileApp() # Create an instance of our class
app.setWindowIcon(QtGui.QIcon("core/qt5/icons/vaile.png"))
app.exec_() # Start the application
